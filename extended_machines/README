This directory contains the Coq development corresponding to the
extended set of machines described in the paper "A Verified
Information-Flow Architecture", which include a block-based memory
model with dynamic allocation, system calls, and an implementation of
a sets-of-principals IFC lattice.

-- List of important files:

   Instr.v
       new instructions for system call, allocation, tag
       manipulation, among others.

   Memory.v
       module type for the block-based memory model
       and proof technique based on memory injections

   AbstractMachine.v
   QuasiAbstractMachine.v
   ConcreteMachine.v
       changes to the basic semantics at each level, plus the instantiation
       of the basic memory model in Memory.v to each machine

   Lattices.v
       as before, the interface of abstract lattices.
       now includes a definition of a lattice of sets of integers
       (represented as Coq lists)

   Arrays.v
       the code, specification, and proof of the implementation
       of counted array manipulation (subset, concatenation
       mainly).

   SOPCLattice.v
       what is a concrete lattice,
       and a correct concrete lattice.
       In particular, the encoding and decoding of tags
       are now relations, which involve the kernel memory.
       Also show that the concrete implementation of sets of
       integers (represented as arrays) is correct.

   SOPSysCalls.v
       definition of the joinP system call for classifying data.

   NISOPMachine.v
       combined proof of noninterference for the concrete machine running
       with sets-of-principals IFC lattice.

-- Compile
        make all
   This will compile the coq definitions, proofs and documentation.
   This code is known to work with Coq 8.5.

-- Glossary

   There are a few differences in terminology between this development and the paper:

   Development			Paper

   TMU ("Tag Management Unit")	Concrete machine hardware rule cache and its lookup mechanism
   Quasi-Abstract Machine	Symbolic rule machine
   tini_quasi_abstract_machine	Symbolic rule machine instantiated with rule table R^{abs}
   tini_concrete_machine	Concrete machine instantiated with fault handler generated from R^{abs}
   etc.

-- Summary

We have omitted the file TINI_inf.v in basic_machines, that relates
our basic notion of TINI to an infinite one, since that is not
fundamentally different in this setting. Also, the symbolic rule
machine is this development works only with IFC labels, and isn't as
general as the original one in /basic_machines. However, these changes
are not very relevant when considering the extensions we'll present
now.

* Structured memory model

The basic definitions of the new memory model are described in
Memory.v. Instead of using plain lists for the memory, the machines
use a richer memory type, which is essentially a map from block names
to frames (lists of atoms). A new frame can be allocated at any point,
returning a fresh block name that references it. Among some new
instructions, there is now Alloc, which allows the machines to
allocate new frames both in user and kernel mode. Block names can't be
forged, ensuring that a pointer can only be use to reference the frame
it was meant for.

In the concrete machine, the cache becomes a dedicated frame in
memory. Each block name is marked as either "kernel" or "user". These
marks are checked on each memory access, providing some additional
memory safety guarantees. In the abstract machine, we stamp blocks
with labels that represent the security level of their context of
allocation. This makes the definition of the indistinguishability
relation on states easier to state. In file Memory.v, we define a
notion of memory injections that is used when proving state
refinements for our machines.


* System call mechanism

We add system calls to the basic machines to make it possible to
implement non-trivial operations in the concrete machine as a kernel
services (e.g. a joinP call, which we discuss below). The basic
definitions for system calls are given in the files AbstractCommon.v
and Concrete.v.

The new SysCall instruction takes one argument, an identifier. A
system call is essentially made of (i) a relation between stacks at
the abstract level and (ii) a piece of code at the concrete level. The
small-step relations for the machines become parametric in a global
table that maps identifiers to system calls. In the abstract and
symbolic rule machines, executing the SysCall instruction looks for
the corresponding identifier in the global system call table, and uses
the relation in the system call to build the next machine state
(cf. step_syscall in AbstractMachine.v). In the concrete machine,
executing a system call has the effect of pushing a return address on
the stack and jumping to some address in the kernel instruction memory
(cf. cstep_syscall in ConcreteMachine.v). System calls are not subject
to IFC rules like the other instructions; instead, we assume that the
relation that implements a system call contains all the necessary
checks for ensuring proper IFC.

* Sets of principals as labels

In our sets-of-principals label model, each label is a finite set of
integers (type Zset.t in Lattices.v); each integer represents a fixed,
preexisting principal. The label ordering is just set inclusion. We
provide a joinP system call that adds a principal to the label of an
atom, providing a form of classification.

In the concrete machine, sets of principals are represented by
integers that point to an array in kernel memory with the list of all
principals contained in that set. In order to program the fault
handler and the code of the joinP call, we implement basic array
operations such as subset testing and union. These are defined in file
Arrays.v, together with the proofs of their specifications. This
requires for instance the addition of a "for" construction for
generating loops (defined in CodeGen.v), as well as a Hoare logic
triple for it, proved in CodeSpecs.v. In addition to the fault handler
correctness proof, we also had to prove that the code that implements
the joinP call is correct with respect to the abstract semantics of
the system call. A system call table with joinP is defined in
SOPCLattice, together with the definition of the joinP code, as well
as the proof of its specification.

* Relational encoding of labels

The use of pointers as tags requires some interesting changes in the
formulation of noninterference. Indeed, since the interpretation of
tags is now relative to the kernel memory, an event of the concrete
machine needs to include the entire kernel memory in addition to the
tag. Once again, this memory is not visible to observers, but instead
define which events' payloads they are able to observe. To make the
interpretation of these tags in the statement of noninterference more
convenient, we change our notion of observation in TINI.v (the
Observation class) so that we convert raw events to a more abstract
type before matching them. This conversion corresponds to the
interpretation of tags in IFC terms.

The representation of labels in memory introduces another technical
difficulty: the relation between labels and tags now becomes partial,
whereas our basic label models used total functions (c.f. labToVal in
CLattices.v). This change makes some proofs more intricate.
